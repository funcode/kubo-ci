resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

resources:
#TODO. add kubo-ci
- name: git-cfcr-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment.git
    branch: master

- name: git-cfcr-release
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-release.git
    branch: master

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: ((bosh.stemcell))

- name: cfcr-deployment
  type: bosh-deployment
  source:
    deployment: ((bosh.deployment)) ##NOTE. we need one per deployment --> Source config can be changed at runtime
    target: ((bosh.target))
    client: ((bosh.client))
    client_secret: ((bosh.client_secret))
    ca_cert: ((bosh.ca_cert))
    jumpbox_url: ((bosh.jumpbox_url))
    jumpbox_ssh_key: ((bosh.jumpbox_ssh_key))

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubeconfig-store
    versioned_file: ((bosh.target))/((bosh.deployment))/kubeconfig
jobs:
# precompile a dev release -> bucket (without bucket)
# delete the existing deployment --force delete

- name: delete-cfcr
  serial: true
  serial_groups: [cfcr-pipeline]
  plan:
  - put: cfcr-deployment
    params:
      delete:
        enabled: true

- name: deploy-cfcr
  serial: true
  serial_groups: [cfcr-pipeline]
  plan:
  - aggregate:
    - get: git-cfcr-deployment
      # trigger: true
    - get: git-cfcr-release
      # trigger: true
    - get: stemcell
  - task: create-release
    config:
      caches:
      - path: git-cfcr-release/blobs
      inputs:
      - name: git-cfcr-release
      outputs:
      - name: cfcr-release-tarball
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          bosh create-release --dir=git-cfcr-release --tarball=cfcr-release-tarball/cfcr-release.tgz --timestamp-version
  - put: cfcr-deployment
    params:
      manifest: git-cfcr-deployment/manifests/cfcr.yml
      cleanup: true
      ops_files:
      - git-cfcr-deployment/manifests/ops-files/misc/single-master.yml
      - git-cfcr-deployment/manifests/ops-files/rename.yml
      stemcells:
      - stemcell/stemcell.tgz
      releases:
      - cfcr-release-tarball/cfcr-release.tgz
      vars:
        deployment_name: ((bosh.deployment))
  - task: create-upload-kubeconfig
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      params:
        CREDHUB_SECRET: ((credhub.client_secret))
        CREDHUB_CLIENT: credhub-admin
        CREDHUB_SERVER: ((credhub.server))
        CREDHUB_CA_CERT: ((credhub.ca_cert))
      outputs:
        - name: outfolder
      run:
        path: bash
        args:
        - -c
        - |
          set -exu
          echo "((bosh.jumpbox_ssh_key))" > /tmp/jumpbox.key
          chmod 600 /tmp/jumpbox.key
          export CREDHUB_PROXY="ssh+socks5://((bosh.jumpbox_url))?private-key=/tmp/jumpbox.key"
          bosh int <(credhub get -n ((bosh.name))/((bosh.deployment))/tls-kubernetes --output-json) --path=/value/ca > /tmp/ca
          admin_password=$(bosh int <(credhub get -n ((bosh.name))/((bosh.deployment))/kubo-admin-password" --output-json) --path=/value)
          cluster_name=((bosh.name))/((bosh.deployment))
          user_name="${cluster_name}/cfcr-admin"
          context_name="${cluster_name}"
          export KUBECONFIG=outfolder/kubeconfig
          kubectl config set-cluster "${cluster_name}" --server=((master-url)) --certificate-authority=/tmp/ca --embed-certs=true
          kubectl config set-credentials "${user_name}" --token="${admin_password}"
          kubectl config set-context "${context_name}" --cluster="${cluster_name}" --user="${user_name}"
          kubectl config use-context "${context_name}"
  - put: gcs-kubeconfig
    params:
      file: outfolder/kubeconfig
  - task: apply-addons
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      params:
        BOSH_ENVIRONMENT: ((bosh.target))
        BOSH_CLIENT: ((bosh.client))
        BOSH_CLIENT_SECRET: ((bosh.client_secret))
        BOSH_CA_CERT: ((bosh.ca_cert))
        BOSH_DEPLOYMENT: ((bosh.deployment))
      run:
        path: bash
        args:
        - -c
        - |
          set -exu
          echo "((bosh.jumpbox_ssh_key))" > /tmp/jumpbox.key
          chmod 600 /tmp/jumpbox.key
          export BOSH_ALL_PROXY="ssh+socks5://((bosh.jumpbox_url))?private-key=/tmp/jumpbox.key"
          bosh run-errand apply-specs

- name: run-smoke-tests
  serial: true
  serial_groups: [cfcr-pipeline]
  plan:
  - get: git-cfcr-deployment
    trigger: true
    passed: ['deploy-cfcr']
  - task: run-smoke-tests-errand
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: pcfkubo/kubo-ci}
      params:
        BOSH_ENVIRONMENT: ((bosh.target))
        BOSH_CLIENT: ((bosh.client))
        BOSH_CLIENT_SECRET: ((bosh.client_secret))
        BOSH_CA_CERT: ((bosh.ca_cert))
        BOSH_DEPLOYMENT: ((bosh.deployment))
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          echo "((bosh.jumpbox_ssh_key))" > /tmp/jumpbox.key
          chmod 600 /tmp/jumpbox.key
          export BOSH_ALL_PROXY="ssh+socks5://((bosh.jumpbox_url))?private-key=/tmp/jumpbox.key"
          bosh run-errand smoke-tests
#
# - name: run-integration-tests
#   serial: true
#   serial_groups: [cfcr-pipeline]
#   plan:
#   - get: git-kubo-ci
#   - get: git-cfcr-deployment
#     trigger: true
#     passed: ['deploy-cfcr']
#   - task: run-integration-tests
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source: {repository: pcfkubo/kubo-ci}
#       run:
#         path: bash
#         args:
#         - -c
#         - |
#         #TODO. grub kubeconfig from bucket
#           cd kubo-ci #TODO. where integration test live
#           export KUBECONFIG=X #HOW?
#           ginkgo -skipPackage multi,persistent,cloudfoundry,addons,lbs -r src/tests/integration-tests
